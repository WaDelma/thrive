
buildscript {
    repositories {
        jcenter()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        flatDir {
            dirs = [new File("libs"),]
        }
    }
    dependencies {
        classpath("me.champeau.gradle:jmh-gradle-plugin:0.4.8")
    }
}

plugins {
    id("org.jetbrains.kotlin.jvm") version "1.3.41"
    id("me.champeau.gradle.jmh") version "0.4.8"
}

version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

sourceSets {
    mem {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/mem/java')
        }
    }
}

configurations {
    memCompile.extendsFrom compile
    memRuntime.extendsFrom runtime
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    testCompile("junit:junit:4.12")
    testCompile("org.jetbrains.kotlin:kotlin-test-junit:1.3.41")
    implementation("org.freemarker:freemarker:2.3.23")
    implementation("commons-io:commons-io:2.4")
    memImplementation("org.organicdesign:Paguro-KF:3.5.6")
    memImplementation("org.openjdk.jol:jol-core:0.9")
    memImplementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
}

jmh {
    dependencies {
        implementation("org.organicdesign:Paguro-KF:3.5.6")
    }
    warmupIterations = 10
    iterations = 20
    fork = 2
    forceGC = true
    jvmArgs = ['-Xmx4G', '-Xms4G', '-XX:+UseG1GC']
    resultFormat = 'CSV'
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.csv")
}

tasks {
    task memBenchmark(type: JavaExec) {
        dependsOn memClasses
        group = "mem"
        classpath = sourceSets.mem.runtimeClasspath
        main = "Mem"
    }
    clean {
        doFirst {
            delete "$projectDir/src/jmh"
        }
    }
    test {
        maxHeapSize = "12G"
    }
    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    task fmpp {
        group = "other"
        def fromDir = "$projectDir/src/templates"
        def intoDir = "$projectDir/src/jmh/java/thrive"
        doLast {
            ant.taskdef(name: "fmpp", classname: "fmpp.tools.AntTask") {
                classpath {
                    fileset(dir: "libs", includes: "*.jar")
                }
            }
            ant.fmpp(
                    sourceRoot: fromDir,
                    outputRoot: intoDir,
                    data: """
                        STRUCTURES: [
                            {
                                type: 'Trie1<Integer>'
                                creator: 'new Trie1<Integer>()'
                                path: 'thrive.Trie1'
                                insert: 'insert'
                                name: 'Trie1'
                                iterator: 'entries'
                            },
                            {
                                type: 'Trie1j<Integer>'
                                creator: 'new Trie1j<Integer>()'
                                path: 'thrive.Trie1j'
                                insert: 'insert'
                                name: 'Trie1j'
                                iterator: 'entries'
                            },
                            {
                                type: 'Trie2<Integer>'
                                creator: 'new Trie2<Integer>()'
                                path: 'thrive.Trie2'
                                insert: 'insert'
                                name: 'Trie2'
                                iterator: 'entries'
                            },
                            {
                                type: 'Trie2j<Integer>'
                                creator: 'new Trie2j<Integer>()'
                                path: 'thrive.Trie2j'
                                insert: 'insert'
                                name: 'Trie2j'
                                iterator: 'entries'
                            },
                            {
                                type: 'PersistentHashMap<Integer, Integer>'
                                creator: 'PersistentHashMap.empty()'
                                path: 'org.organicdesign.fp.collections.PersistentHashMap'
                                insert: 'assoc'
                                name: 'PersistentHashMap'
                                iterator: 'iterator'
                            },
                            {
                                type: 'PersistentTreeMap<Integer, Integer>'
                                creator: 'PersistentTreeMap.empty()'
                                path: 'org.organicdesign.fp.collections.PersistentTreeMap'
                                insert: 'assoc'
                                name: 'PersistentTreeMap'
                                iterator: 'iterator'
                            }
                        ]
                    """
            )
        }
    }
}

